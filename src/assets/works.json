[
  {
    "id": 1,
    "titre": "Leçon 2 : Dessiner avec Tkinter",
    "description": "Dans cette leçon on présente comment utiliser le canvas du Tkinter qui est une meilleure alternative à Turtle, vue en 1ère année.",
    "codes": [
      {
        "codeId": 1,
        "titre": "Lignes & Rectangles",
        "description": "",
        "langage": "python",
        "code": "# This code source is for educational purpose\n#-------------------------------------------------\n\n# import all the contents of the tkinter module\nfrom tkinter import *\n\n# create the application window\nmaster = Tk()\n\n# create a canvas to draw into\nw = Canvas(master, width=200, height=100)\n\n# make the application window the same size as the canvas\nw.pack()\n\n# draw a black line\nw.create_line(0, 0, 200, 100)\n\n# draw a red dashed line\nw.create_line(0, 100, 200, 0, fill=\"red\", dash=(4, 4))\n\n# draw a blue filled rectangle\nw.create_rectangle(50, 25, 150, 75, fill=\"blue\")\n\n# make the window interactive\nmainloop()",
        "images": []
      },
      {
        "codeId": 2,
        "titre": "Pièces Tetris",
        "description": "On va utiliser les commandes de dessins pour dessiner les pièces du jeu Tetris.",
        "langage": "python",
        "code": "# import all the contents of the tkinter module\nfrom tkinter import *\n\n# create the application window\nmaster = Tk()\n\n# create a canvas to draw into\nw = Canvas(master, width=880, height=100)\n\n# make the application window the same size as the canvas\nw.pack()\n\n# forme 1\nw.create_rectangle(5, 5, 35, 35, fill=\"#2196f3\")\nw.create_rectangle(5, 35, 35, 65, fill=\"#2196f3\")\nw.create_rectangle(35, 35, 65, 65, fill=\"#2196f3\")\nw.create_rectangle(35, 65, 65, 95, fill=\"#2196f3\")\n\n# forme 2\nw.create_rectangle(130, 35, 160, 65, fill=\"#f44336\")\nw.create_rectangle(130, 65, 160, 95, fill=\"#f44336\")\nw.create_rectangle(160, 5, 190, 35, fill=\"#f44336\")\nw.create_rectangle(160, 35, 190, 65, fill=\"#f44336\")\n\n# forme 3\nw.create_rectangle(255, 5, 285, 35, fill=\"#e91e63\")\nw.create_rectangle(255, 35, 285, 65, fill=\"#e91e63\")\nw.create_rectangle(255, 65, 285, 95, fill=\"#e91e63\")\nw.create_rectangle(285, 65, 315, 95, fill=\"#e91e63\")\n\n# forme 4\nw.create_rectangle(380, 65, 410, 95, fill=\"#9c27b0\")\nw.create_rectangle(410, 5, 440, 35, fill=\"#9c27b0\")\nw.create_rectangle(410, 35, 440, 65, fill=\"#9c27b0\")\nw.create_rectangle(410, 65, 440, 95, fill=\"#9c27b0\")\n\n# forme 5\nw.create_rectangle(535, 5, 565, 35, fill=\"#673ab7\")\nw.create_rectangle(505, 35, 535, 65, fill=\"#673ab7\")\nw.create_rectangle(535, 35, 565, 65, fill=\"#673ab7\")\nw.create_rectangle(565, 35, 595, 65, fill=\"#673ab7\")\n\n# forme 6\nw.create_rectangle(630, 5, 660, 35, fill=\"#03a9f4\")\nw.create_rectangle(660, 5, 690, 35, fill=\"#03a9f4\")\nw.create_rectangle(630, 35, 660, 65, fill=\"#03a9f4\")\nw.create_rectangle(660, 35, 690, 65, fill=\"#03a9f4\")\n\n# forme 7\nw.create_rectangle(755, 5, 785, 35, fill=\"#009688\")\nw.create_rectangle(785, 5, 815, 35, fill=\"#009688\")\nw.create_rectangle(815, 5, 845, 35, fill=\"#009688\")\nw.create_rectangle(845, 5, 875, 35, fill=\"#009688\")\n\nmainloop()",
        "images": []
      }
    ]
  },
  {
    "id": 2,
    "titre": "Leçon 3 : Dessiner une maison",
    "description": "On va utiliser Tkinter pour dessiner une maison.",
    "codes": [
      {
        "codeId": 3,
        "titre": "",
        "description": "",
        "langage": "python",
        "code": "from tkinter import *\n\n# Créer la fenêtre\nw = Tk()\n\n# Créer l'espace de dessin\nc = Canvas(w, width=454, height=354)\nc.pack()\n\n# Dessiner la cheminée\nc.create_rectangle(318, 2, 356, 60, fill=\"#800000\")\n\n# Dessiner le toit\nc.create_polygon(2, 102, 452, 102, 227, 2, fill=\"#ffa500\", outline=\"#000\")\n\n# Dessiner le mur\nc.create_rectangle(27, 102, 427, 352, fill=\"#ffd700\")\n\n# Dessiner la fenêtre du toit\nc.create_oval(202, 27, 252, 77, fill=\"#5f9ea0\", width=\"2\")\nc.create_line(202, 52, 252, 52, width=\"5\")\nc.create_line(227, 27, 227, 77, width=\"5\")\n\n# Dessiner la porte\nc.create_rectangle(72, 190, 173, 352, fill=\"#ffa500\")\n\n# Dessiner les fenêtres\nc.create_rectangle(188, 190, 282, 284, fill=\"#afeeee\", width=\"3\")\nc.create_line(235, 190, 235, 284, width=\"5\")\n\nc.create_rectangle(300, 190, 394, 284, fill=\"#afeeee\", width=\"3\")\nc.create_line(347, 190, 347, 284, width=\"5\")\n\nmainloop()",
        "images": []
      }
    ]
  },
  {
    "id": 3,
    "titre": "Leçon 4 : Dessiner la grille de Tetris",
    "description": "",
    "codes": [
      {
        "codeId": 4,
        "titre": "",
        "langage": "python",
        "code": "from tkinter import *\n\n# Constantes Globales\nXCELLS, YCELLS = 12, 20     # Nombre de cellules dans la grille\nWCELL, HCELL = 25, 25       # Dimensions d'une cellule (pixels)\nWGRILLE = WCELL * XCELLS    # Largeur de la Grille (pixels)\nHGRILLE = HCELL * YCELLS    # Hauteur de la Grille (pixels)\nXGRILLE, YGRILLE = 10, 10   # Position de la Grille (pixels)\nWCANVAS = WGRILLE + XGRILLE * 2  # Largeur du Canvas\nHCANVAS = HGRILLE + YGRILLE * 2  # Hauteur du Canvas\n\n# Couleurs possibles des cellules\nCOLORS = [\"#2196f3\", \"#f44336\", \"#e91e63\",\n          \"#9c27b0\", \"#673ab7\", \"#03a9f4\", \"#009688\"]\n\n# Créer la fenêtre\nwindow = Tk()\n\n# Créer le Canvas de la grille du jeu\ngcanvas = Canvas(window, width=WCANVAS, height=HCANVAS)\ngcanvas.pack()\n\n# Dessiner les bords de la grille\ngcanvas.create_rectangle(4, 4, WCANVAS - 2, HCANVAS - 2, width=4)\ngcanvas.create_rectangle(XGRILLE, XGRILLE,\n                         WCANVAS - XGRILLE+2, HCANVAS - XGRILLE+2, width=2, outline=\"#999999\")\n\n# Initialiser la grille\nfor i in range(XCELLS):\n    for j in range(YCELLS):\n        gcanvas.create_rectangle(XGRILLE + WCELL * i, YGRILLE + HCELL * j,\n                                 XGRILLE + WCELL * (i+1), YGRILLE + HCELL * (j+1), fill=\"#586241\")\n\nmainloop()"
      }
    ]
  },
  {
    "id": 4,
    "titre": "Leçon 5 : Feu de circulation",
    "description": "Nous allons utiliser les fonctions de dessin et les timers pour dessiner un feu de circulation.",
    "codes": [
      {
        "codeId": 5,
        "titre": "Version initiale statique",
        "langage": "python",
        "code": "from tkinter import *\n\n# Créer la fenêtre\nwin = Tk()\n\n# Constantes\nD_FEU = 80     # Diamètre d'un feu\nESPACEMENT = 20  # Espacement entre les feux\nW_CANVAS = D_FEU + 2 * ESPACEMENT\nH_CANVAS = 3 * D_FEU + 4 * ESPACEMENT\n\n# Créer un Canvas\nw = Canvas(win, width=W_CANVAS, height=H_CANVAS)\nw.pack()\n\n# Créer trois cercles de diamètre 100\nw.create_oval(ESPACEMENT, ESPACEMENT,\n              ESPACEMENT + D_FEU, ESPACEMENT + D_FEU, fill='red', width=3)\nw.create_oval(ESPACEMENT, 2 * ESPACEMENT + D_FEU,\n              ESPACEMENT + D_FEU, 2*(ESPACEMENT + D_FEU), fill='yellow', width=3)\nw.create_oval(ESPACEMENT, 3 * ESPACEMENT + 2 * D_FEU,\n              ESPACEMENT + D_FEU, 3*(ESPACEMENT + D_FEU), fill='green', width=3)\n\nmainloop()"
      },
      {
        "codeId": 6,
        "titre": "Version clignotante",
        "langage": "python",
        "code": "from tkinter import *\n\n# Créer la fenêtre\nwin = Tk()\n\n# Constantes\nD_FEU = 80     # Diamètre d'un feu\nESPACEMENT = 20  # Espacement entre les feux\nW_CANVAS = D_FEU + 2 * ESPACEMENT\nH_CANVAS = 3 * D_FEU + 4 * ESPACEMENT\n\n# Créer un Canvas\nw = Canvas(win, width=W_CANVAS, height=H_CANVAS)\nw.pack()\n\n# Créer trois cercles de diamètre 100\nrouge = w.create_oval(ESPACEMENT, ESPACEMENT,\n                      ESPACEMENT + D_FEU, ESPACEMENT + D_FEU, fill='red', width=3)\njaune = w.create_oval(ESPACEMENT, 2 * ESPACEMENT + D_FEU,\n                      ESPACEMENT + D_FEU, 2*(ESPACEMENT + D_FEU), fill='yellow', width=3)\nvert = w.create_oval(ESPACEMENT, 3 * ESPACEMENT + 2 * D_FEU,\n                     ESPACEMENT + D_FEU, 3*(ESPACEMENT + D_FEU), fill='green', width=3)\n\n\ndef clignoter():\n    global w\n\n    # faire clignoter le rouge\n    fill = w.itemcget(rouge, 'fill')\n    if fill != '':\n        w.itemconfigure(rouge, fill='')\n    else:\n        w.itemconfigure(rouge, fill='red')\n\n    # faire clignoter le jaune\n    fill = w.itemcget(jaune, 'fill')\n    if fill != '':\n        w.itemconfigure(jaune, fill='')\n    else:\n        w.itemconfigure(jaune, fill='yellow')\n\n    # faire clignoter le jaune\n    fill = w.itemcget(vert, 'fill')\n    if fill != '':\n        w.itemconfigure(vert, fill='')\n    else:\n        w.itemconfigure(vert, fill='green')\n\n    w.after(1000, clignoter)\n\n\nw.after(1000, clignoter)\n\nmainloop()"
      },
      {
        "codeId": 7,
        "titre": "Version fonctionnelle",
        "langage": "python",
        "code": "from tkinter import *\n\n# Créer la fenêtre\nwin = Tk()\n\n# Constantes\nD_FEU = 80     # Diamètre d'un feu\nESPACEMENT = 20  # Espacement entre les feux\nW_CANVAS = D_FEU + 2 * ESPACEMENT\nH_CANVAS = 3 * D_FEU + 4 * ESPACEMENT\n\n# Créer un Canvas\nw = Canvas(win, width=W_CANVAS, height=H_CANVAS)\nw.pack()\n\n# Créer trois cercles de diamètre 100\nrouge = w.create_oval(ESPACEMENT, ESPACEMENT,\n                      ESPACEMENT + D_FEU, ESPACEMENT + D_FEU, fill='', width=3)\njaune = w.create_oval(ESPACEMENT, 2 * ESPACEMENT + D_FEU,\n                      ESPACEMENT + D_FEU, 2*(ESPACEMENT + D_FEU), fill='', width=3)\nvert = w.create_oval(ESPACEMENT, 3 * ESPACEMENT + 2 * D_FEU,\n                     ESPACEMENT + D_FEU, 3*(ESPACEMENT + D_FEU), fill='', width=3)\n\n\ndef allumer_jaune():\n    w.itemconfigure(rouge, fill='')\n    w.itemconfigure(jaune, fill='yellow')\n    w.after(1000, allumer_vert)\n\n\ndef allumer_vert():\n    w.itemconfigure(jaune, fill='')\n    w.itemconfigure(vert, fill='green')\n    w.after(5000, allumer_rouge)\n\n\ndef allumer_rouge():\n    w.itemconfigure(vert, fill='')\n    w.itemconfigure(rouge, fill='red')\n    w.after(5000, allumer_jaune)\n\n\nallumer_rouge()\n\nmainloop()"
      },
      {
        "codeId": 8,
        "titre": "Version finale",
        "langage": "python",
        "code": "from tkinter import *\n\n# Créer la fenêtre\nwin = Tk()\n\n# Constantes\nD_FEU = 80     # Diamètre d'un feu\nESPACEMENT = 20  # Espacement entre les feux\nW_CANVAS = D_FEU + 2 * ESPACEMENT\nH_CANVAS = 3 * D_FEU + 4 * ESPACEMENT\n\n# Créer un Canvas\nw = Canvas(win, width=W_CANVAS, height=H_CANVAS)\nw.pack()\n\n# Créer trois cercles de diamètre 100\nrouge = w.create_oval(ESPACEMENT, ESPACEMENT,\n                      ESPACEMENT + D_FEU, ESPACEMENT + D_FEU, fill='', width=3)\njaune = w.create_oval(ESPACEMENT, 2 * ESPACEMENT + D_FEU,\n                      ESPACEMENT + D_FEU, 2*(ESPACEMENT + D_FEU), fill='', width=3)\nvert = w.create_oval(ESPACEMENT, 3 * ESPACEMENT + 2 * D_FEU,\n                     ESPACEMENT + D_FEU, 3*(ESPACEMENT + D_FEU), fill='', width=3)\n\ncompteur = 0\nclignoteur_id = None\n\n\ndef allumer_jaune():\n    w.itemconfigure(rouge, fill='')\n    w.itemconfigure(jaune, fill='yellow')\n    win.after(1000, allumer_vert)\n\n\ndef allumer_vert():\n    global compteur, clignoteur_id\n    w.itemconfigure(jaune, fill='')\n    w.itemconfigure(vert, fill='green')\n    compteur = 0\n    clignoteur_id = win.after(5000, clignoter_jaune)\n\n\ndef allumer_rouge():\n    w.itemconfigure(vert, fill='')\n    w.itemconfigure(rouge, fill='red')\n    win.after(5000, allumer_jaune)\n\n\ndef clignoter_jaune():\n    global compteur, clignoteur_id\n    win.after_cancel(clignoteur_id)\n    if compteur < 6:\n        etat = w.itemcget(jaune, 'fill')\n        if etat == 'yellow':\n            w.itemconfigure(jaune, fill='')\n        else:\n            w.itemconfigure(jaune, fill='yellow')\n        compteur += 1\n        clignoteur_id = win.after(500, clignoter_jaune)\n    else:\n        win.after(1000, allumer_rouge)\n\n\nallumer_rouge()\n\nmainloop()"
      }
    ]
  },
  {
    "id": 5,
    "titre": "Leçon 6 : Jeu Pierre-Ciseaux-Feuille",
    "description": "L'objectif de ce jeu est de présenter les nombres aléatoires et les boucles.",
    "codes": [
      {
        "codeId": 9,
        "titre": "",
        "langage": "python",
        "code": "import random\n\nCHOIX = ['Ciseaux', 'Feuille', 'Pierre']\n\n\ndef bat(j1, j2):\n return ((j2 - j1) % 3) == 1\n\n\ndef choix_joueur():\n while True:\n try:\n j1 = int(input(('\\n'.join('{}. {}'.format(i, CHOIX[i]) for i in range(\n len(CHOIX))) + '\\nQuel est votre choix ? ')))\n if 0 <= j1 <= 2:\n return j1\n except:\n pass\n print('> Choix incorrect')\n\n\ndef gagnant(pia, pj1):\n if pia > pj1:\n print('Vous avez perdu {} contre {}'.format(pia, pj1))\n elif pia < pj1:\n print('Vous avez gagné {} contre {}'.format(pj1, pia))\n else:\n print('Match nul')\n\n##########################################################\n# Programme Principal\n\n\nprint('Jeu Pierre - Ciseaux - Feuille')\n\npia, pj1 = 0, 0\nfor i in range(3):\n print()\n ia = random.randint(0, 2)\n j1 = choix_joueur()\n\n if bat(j1, ia):\n print('\\nJoueur gagne : {} bat {}'.format(CHOIX[j1], CHOIX[ia]))\n pj1 += 1\n elif bat(ia, j1):\n print('\\nOrdinateur gagne : {} est battu(e) par {}'.format(\n CHOIX[j1], CHOIX[ia]))\n pia += 1\n else:\n print('\\nManche nulle : {} et {} match nul.'.format(\n CHOIX[j1], CHOIX[ia]))\n\nprint('\\nLe jeu est terminé')\ngagnant(pia, pj1)"
      }
    ]
  },
  {
    "id": 6,
    "titre": "Leçon 7 : Actions simples",
    "description": "L'objectif de cette leçon est de présenter les actions simples ainsi que les sous chaînes.",
    "codes": [
      {
        "codeId": 10,
        "titre": "Calcul de somme",
        "description": "Calcul de la somme de deux entiers",
        "langage": "python",
        "code": "# Afficher la somme de deux entiers\n\n# saisie des données\na = int(input('Donner a : '))\nb = int(input('Donner b : '))\n\n# calcul\ns = a + b\n\n# affichage du résultat\nprint(a, '+', b, '=', s)"
      },
      {
        "codeId": 11,
        "titre": "Conversion de température",
        "description": "Conversion automatique de température °C -> °F",
        "langage": "python",
        "code": "# Conversion de température\n\n# Saisie de la température\nt = input('Donner une température en °C/°F (exemple : 15C) : ')\n\n# extraire les chiffres et l'unité\nt1, u1 = float(t[:-1]), t[-1]\n\nif u1 == 'C':  # si la température en °C --> °F\n    t2 = 9/5*t1+32\n    u2 = 'F'\nelif u1 == 'F':  # si la température en °F --> °C\n    t2 = 5/9*(t1-32)\n    u2 = 'C'\n\n# Afficher le résultat\nprint(t1, u1, '=', t2, u2)"
      },
      {
        "codeId": 12,
        "titre": "Table de multiplication",
        "description": "Affichage de la table de multiplication",
        "langage": "python",
        "code": "# Affichage de la table de multiplication\n\nn = int(input('Donner n : '))\n\nfor i in range(n+1):\n    if i == 0:\n        print('%2s' % ('*',), end='')\n    else:\n        print('%4d' % (i,), end='')\nprint()\n\nfor i in range(1, n+1):\n    print('%2d' % i, end='')\n    for j in range(1, n+1):\n        print('%4d' % (i*j,), end='')\n    print()"
      }
    ]
  },
  {
    "id": 7,
    "titre": "Leçon 8 : Calcul du temps de révision",
    "description": "L'objectif de cette leçon est de présenter comment améliorer progressivement un programme.",
    "codes": [
      {
        "codeId": 13,
        "titre": "Version 1",
        "description": "Dans cette version on contrôle la saisie d'une heure pour vérifier qu'elle est valide et qu'elle est supèrieure ou égale à une heure donnée.",
        "langage": "python",
        "code": "def time_to_min(time):\n    \"\"\"Convertit un temps au format 'hh:mm' en un nombre de minutes.\"\"\"\n    hh = int(time[:2])\n    mm = int(time[3:])\n    return 60 * hh + mm\n\n\ndef min_to_time(min):\n    \"\"\"Convertit un nombre de minutes en une heure au format 'hh:mm' \"\"\"\n    hh = min // 60, \n    mm = min % 60\n    return '%02d:%02d' % (hh, mm)\n\n\ndef saisie_heure(msg, hdm):\n    \"\"\"Assure la saisie d'une date valide qui :\n    - respecte le format 'hh:mm'\n    - est dans l'intervalle '00:00' à '23:59'\n    - est supèrieure ou égale à hdm.\"\"\"\n    while True:\n        heure = input(msg)\n        valide = len(heure) == 5 and heure[2] == ':'\n        if valide:\n            hh = int(heure[:2])\n            mm = int(heure[3:])\n            valide = 0 <= hh <= 23 and 0 <= mm <= 59\n        if valide:\n            valide = heure >= hdm\n        if valide:\n            return heure\n        print('Saisie incorrecte.')\n\n\n# Heures de révision de Physique\nhd1 = saisie_heure(\"Heure début de révision (Physique) : \", '00:00')\nhf1 = saisie_heure(\"Heure fin de révision (Physique) : \", hd1)\n\n# Heures de révision de Math\nhd2 = saisie_heure(\"Heure début de révision (Mathématiques) : \", hf1)\nhf2 = saisie_heure(\"Heure fin de révision (Mathématiques) : \", hd2)\n\n# Calculer la durée de révision de Physique en minutes\ntr1 = time_to_min(hf1) - time_to_min(hd1)\n# Calculer la durée de révision de Math en minutes\ntr2 = time_to_min(hf2) - time_to_min(hd2)\n# Calculer la durée totale de révision en minutes\ntt = tr1 + tr2\n\n# Affichage des résultats\nprint('Temps de révision')\nprint('Physique : ', min_to_time(tr1))\nprint('Math : ', min_to_time(tr2))\nprint('Durée Totale : ', min_to_time(tt))"
      },
      {
        "codeId": 14,
        "titre": "Version 2",
        "description": "Dans cette version on implémente une fonction qui saisit l'heure de début/et de fin de révision d'une matière.",
        "langage": "python",
        "code": "\ndef time_to_min(time):\n    \"\"\"Convertit un temps au format 'hh:mm' en un nombre de minutes.\"\"\"\n    hh = int(time[:2])\n    mm = int(time[3:])\n    return 60 * hh + mm\n\n\ndef min_to_time(min):\n    \"\"\"Convertit un nombre de minutes en une heure au format 'hh:mm' \"\"\"\n    hh, mm = min // 60, min % 60\n    return '%02d:%02d' % (hh, mm)\n\n\ndef saisie_heure(msg, hdm):\n    \"\"\"Assure la saisie d'une date valide qui :\n    - respecte le format 'hh:mm'\n    - est dans l'intervalle '00:00' à '23:59'\n    - est supèrieure ou égale à hdm.\"\"\"\n    while True:\n        hd = input(msg)\n        if len(hd) != 5 or \\\n                hd[2] != ':' or \\\n                not hd[:2].isdigit() or \\\n                not hd[3:].isdigit():\n            print('Format incorrect!')\n            continue\n\n        if 0 > int(hd[:2]) or int(hd[:2]) > 23 or \\\n                0 > int(hd[3:]) or int(hd[3:]) > 59:\n            print('Date incorrecte!')\n            continue\n\n        if hd < hdm:\n            print(\"L'heure doit être >=\", hdm)\n            continue\n\n        return hd\n\n\ndef saisie_revision(matiere, hdm):\n    \"\"\"Saisie de l'heure de début et de fin de révision d'une seule matière.\"\"\"\n    while True:\n        hdr = saisie_heure(\n            \"Heure début de révision (%s) >= %s : \" % (matiere, hdm), hdm)\n        hfr = saisie_heure(\"Heure de fin de révision (%s) > %s : \" %\n                           (matiere, hdr), hdr)\n\n        if hfr > hdr:\n            return hdr, hfr\n        else:\n            print(\"L'heure de fin de révision doit être >\", hdr)\n\n\n# Heures de révision de Physique\nhd1, hf1 = saisie_revision(\"Physiques\", '00:00')\n\n# Heures de révision de Math\nhd2, hf2 = saisie_revision(\"Mathématiques\", hf1)\n\n# Calculer la durée de révision de Physique en minutes\ntr1 = time_to_min(hf1) - time_to_min(hd1)\n# Calculer la durée de révision de Math en minutes\ntr2 = time_to_min(hf2) - time_to_min(hd2)\n# Calculer la durée totale de révision en minutes\ntt = tr1 + tr2\n\n# Affichage des résultats\nprint('Temps de révision')\nprint('Physique :', min_to_time(tr1))\nprint('Math :', min_to_time(tr2))\nprint('Durée Totale :', min_to_time(tt))"
      },
      {
        "codeId": 15,
        "titre": "Version 3",
        "description": "Dans cette version on peut calculer le temps de révision de plusieurs matières au lieu de deux.",
        "langage": "python",
        "code": "\ndef time_to_min(time):\n    \"\"\"Convertit un temps au format 'hh:mm' en un nombre de minutes.\"\"\"\n    hh = int(time[:2])\n    mm = int(time[3:])\n    return 60 * hh + mm\n\n\ndef min_to_time(min):\n    \"\"\"Convertit un nombre de minutes en une heure au format 'hh:mm' \"\"\"\n    hh, mm = min // 60, min % 60\n    return '%02d:%02d' % (hh, mm)\n\n\ndef saisie_heure(msg, hdm):\n    \"\"\"Assure la saisie d'une date valide qui :\n    - respecte le format 'hh:mm'\n    - est dans l'intervalle '00:00' à '23:59'\n    - est supèrieure ou égale à hdm.\"\"\"\n    while True:\n        hd = input(msg)\n        if len(hd) != 5 or \\\n                hd[2] != ':' or \\\n                not hd[:2].isdigit() or \\\n                not hd[3:].isdigit():\n            print('Format incorrect!')\n            continue\n\n        if 0 > int(hd[:2]) or int(hd[:2]) > 23 or \\\n                0 > int(hd[3:]) or int(hd[3:]) > 59:\n            print('Date incorrecte!')\n            continue\n\n        if hd < hdm:\n            print(\"L'heure doit être >=\", hdm)\n            continue\n\n        return hd\n\n\ndef saisie_revision(matiere, hdm):\n    \"\"\"Saisie de l'heure de début et de fin de révision d'une seule matière.\"\"\"\n    while True:\n        hdr = saisie_heure(\n            \"Heure début de révision (%s) >= %s : \" % (matiere, hdm), hdm)\n        hfr = saisie_heure(\"Heure de fin de révision (%s) > %s : \" %\n                           (matiere, hdr), hdr)\n\n        if hfr > hdr:\n            return hdr, hfr\n        else:\n            print(\"L'heure de fin de révision doit être >\", hdr)\n\n\n# Saisie du nombre de matières\nn = int(input('Donner le nombre de matières à réviser : '))\n\nl_revision = []\ntrt = 0\nhdm = '00:00'\nfor i in range(n):\n    print('Matière n°', (i+1))\n\n    # Matière à réviser\n    matiere = input('Donner le nom de la matière : ')\n\n    # Heures de révision de Physique\n    hdr, hfr = saisie_revision(matiere, hdm)\n\n    # Temps de révision\n    trm = time_to_min(hfr) - time_to_min(hdr)\n\n    # Temps de révision total\n    trt += trm\n\n    # ajouter le nom de la matière\n    # et le temps de révision\n    l_revision.append((matiere, trm))\n\n    hdm = hfr\n\n# Affichage des résultats\nprint('Temps de révision')\nfor matiere, tr in l_revision:\n    print(matiere, ':', min_to_time(tr))\n\nprint('Durée Totale :', min_to_time(trt))"
      }
    ]
  },
  {
    "id": 8,
    "titre": "Leçon 9 : Jeu Impair Gagnant",
    "description": "L'objectif de ce jeu est de présenter les nombres aléatoires, les structures itératives et les boucles.",
    "codes": [
      {
        "codeId": 16,
        "titre": "",
        "langage": "python",
        "code": "import random\n\ndef saisie_nombre():\n    while True:\n        nch = input(\"Donner un nombre de quatre chiffres : \")\n        if nch.isdigit():\n            n = int(nch)       \n            if 1000 <= n <= 9999:\n                return n\n        print(\"Saisie incorrecte!\")\n\n\ndef compter_chiffres(n):\n    nch = str(n)\n    nci = 0\n    for c in nch:\n        if c in ['1', '3', '5', '7', '9']:\n            nci += 1\n    return nci\n\n\n# Programme principal\nsj1, sj2 = 0, 0\nfor i in range(3):\n    print('Tour', (i+1))\n    \n    j1 = saisie_nombre()\n    j2 = random.randint(1000, 9999)\n\n    p = j1 * j2\n\n    print(\"Choix joueur : %d - Choix ordinateur : %d\" % (j1, j2))\n    print(\"%d * %d = %d\" % (j1, j2, p))\n\n    nci = compter_chiffres(p)\n    print(\"Le nombre de chiffres impairs :\", nci)\n\n    if nci % 2 == 1:\n        print('Le nombre de chiffres impairs est impair. Vous gagnez!')\n        sj1 += 1\n    else:\n        print('Le nombre de chiffres impairs est pair. Vous perdez!')\n        sj2 += 1\n\nif sj1 > sj2:\n    print('Vous avez gagné au jeu : %d contre %d' % (sj1, sj2))\nelse:\n    print('Vous avez perdu au jeu :  %d contre %d' % (sj1, sj2))"
      }
    ]
  },
  {
    "id": 9,
    "titre": "Leçon 10 : Test de calcul mental",
    "description": "L'objectif de ce jeu est de présenter les nombres aléatoires, les structures itératives et les boucles.",
    "codes": [
      {
        "codeId": 17,
        "titre": "Afficher les opérations",
        "langage": "python",
        "code": "import random\n\nprint('Test de calcul mental')\n\nnbq = 3\n\nfor i in range(nbq):\n op = random.choice(['+','-','*','/'])\n\n v1 = random.randint(1, 10)\n v2 = random.randint(1, 10)\n\n rep = int(input('Q(%d/%d) %d %s %d = ? ' % (i+1, nbq, v1, op, v2)))"
      },
      {
        "codeId": 18,
        "titre": "Evaluer les réponses",
        "langage": "python",
        "code": "import random\n\nprint('Test de calcul mental')\n\nnbq = 3\n\nfor i in range(nbq):\n    op = random.choice(['+','-','*','/'])\n\n    v1 = random.randint(1, 10)\n    v2 = random.randint(1, 10)\n\n    rep = int(input('Q(%d/%d) %d %s %d = ? ' % (i+1, nbq, v1, op, v2)))\n\n    if op == '+': res = v1 + v2\n    elif op == '*': res = v1 * v2\n    elif op == '-': res = v1 - v2\n    else: res = v1 // v2\n\n    if rep == res:\n        print('Correct!')\n    else:\n        print('Incorrect!')\n        print('%d %s %d = %d ' % (v1, op, v2, res))"
      },
      {
        "codeId": 19,
        "titre": "Afficher le score",
        "langage": "python",
        "code": "# Calculator\nimport random\n\nprint('Test de calcul mental')\n\n# Nombre de questions\nnbq = 10\n\n# Le score actuel\nscore = nbq\n\nfor i in range(nbq):\n    # choisir une opération au hasard\n    op = random.choice(['+','-','*','/'])\n\n    if op in ['+', '-']:\n        # l'intervalle pour les opérations \n        # d'addition et de soustraction\n        binf, bsup = 10, 99\n    elif op in ['*', '/']:\n        # l'intervalle pour les opérations \n        # de multiplication et de division\n        binf, bsup = 1, 20\n\n    # On sélectionne deux nombres au hasard\n    # dans l'intervalle [binf, bsup]\n    v1 = random.randint(binf, bsup)\n    v2 = random.randint(binf, bsup)\n\n    # On calcule le résultat de l'opération\n    if op == '+':\n        res = v1 + v2\n    elif op == '-':\n        res = v1 - v2\n    elif op == '*':\n        res = v1 * v2\n    else:\n        v1 = v1 * v2\n        res = v1 // v2\n    \n    # L'utilisateur saisie la réponse à la question\n    rep = int(input('Q(%d/%d) %d %s %d = ? ' % (i+1, nbq, v1, op, v2)))\n\n    # On vérifie l'exactitude de la réponse\n    if rep == res:\n        print('Correct!')\n    else:\n        # en cas d'erreur le joueur est pénalisé\n        score -= 1\n        print('Non, incorrect!')\n        print('%d %s %d = %d ' % (v1, op, v2, res))\n\n# On affiche le score\nprint(\"Votre score est : %d/%d\" % (score, nbq))\n\n# On affiche une remarque selon le score\nif score == 10:\n    print('Vous êtes un dur en calcul mental!')\nelif score >= 8:\n    print('Très bien!')\nelif score >= 6:\n    print('Au dessus de la moyenne!')\nelse:\n    print('Vous pourriez faire mieux!')"
      }
    ]
  },
  {
    "id": 10,
    "titre": "Leçon 11 : Devine mon nombre",
    "description": "L'objectif de ce jeu est de manipuler les nombres aléatoires, les structures itératives et les boucles.",
    "codes": [
      {
        "codeId": 20,
        "titre": "L'ordinateur choisi un nombre",
        "langage": "python",
        "code": "import math\nimport random\n\n\ndef saisie_nbre(bi, bs):\n    \"\"\"Indiquer un nombre dans un intervalle donné\"\"\"\n    while True:\n        n = int(input(\"Donner un nombre dans l'intervalle [%d, %d] : \" % (bi,bs)))\n        if bi <= n <= bs:\n            return n\n\n\ndef intervalle(nb_chiffres):\n    \"\"\"Calculer l'intervalle de nombre pour un nombre de chiffres donné\"\"\"\n    bi = int('1' + '0' * (nb_chiffres - 1))\n    bs = int('9' * nb_chiffres)\n    return bi, bs\n\n\ndef nbre_essais(n):\n    \"\"\"Calculer le nombre d'essais\"\"\"\n    return int(math.log2(n)) + 1\n\n\ndef saisie_nbre_chiffres():\n    \"\"\"Indiquer le nombre de chiffres\"\"\"\n    while True:\n        n = int(input(\"Donner le nombre de chiffres [2, 5] : \"))\n        if 2 <= n <= 5:\n            return n\n\n\n#####################################################\nprint('Sélectionner la difficulté du jeu!')\nnbc = saisie_nbre_chiffres()\nbi, bs = intervalle(nbc)\nnbe = nbre_essais(bs)\ninconnu = random.randint(bi, bs)\nprint(\"J'ai choisi un nombre aléatoire dans l'intervalle [%d, %d]\" % (bi, bs))\nprint(\"Et, vous devez le deviner en moins de %d essais\" % (nbe))\nessais = 1\nfor i in range(nbe):\n    print('Essai %d/%d' % (essais, nbe))\n    n = saisie_nbre(bi, bs)\n    if n > inconnu:\n        print(n, 'est trop grand')\n    elif n < inconnu:\n        print(n, 'est trop petit')\n    essais += 1\n\n    if n == inconnu:\n        break\n\nif n == inconnu:\n    print('Bravo! Vous avez deviné!')\nelse:\n    print('Le nombre caché est : ', inconnu)"
      }
    ]
  },
  {
    "id": 12,
    "titre": "Leçon 12 : Les liste",
    "description": "L'objectif de cette leçon est de manipuler les listes.",
    "codes": [
      {
        "codeId": 24,
        "titre": "Manipulation des listes",
        "langage": "python",
        "code": "#!/usr/bin/env python\n# coding: utf-8\n\n# # Les listes\n\n# Voici la liste d'ami(e)s d'**Abderrazek** :\n\n# Définir la liste d'amis de Abderrazek\namis = [\"Adem\", \"Hala\", \"Yassine\", \"Ismail\", \"Mohamed\", \"Youssef\", \"Eya\"]\n\n\n# 1) Déterminer le nombre d'amis d'**Abderrazek**.\nnb_amis = len(amis)\nprint(\"J'ai %d amis\" % (nb_amis))\n\n\n# 2) Maintenant trouver si **Kacem** fait partie des amis d'**Abderrazek**.\n# Déterminer si \"Kacem\" est dans la liste d'amis\nprint(\"Kacem\" in amis)\n\n\n# 3) Déterminer si une personne donnée fait partie de la liste des amis.\npersonne = input('Donner le nom de la personne : ')\n\n# Déterminer si cette personne figure dans la liste d'amis\nest_amis = personne in amis\nif est_amis:\n    print('%s est mon ami(e)' % personne)\nelse:\n    print('%s n\\'est pas encore mon ami(e)' % personne)\n\n\n# 4) Si ***personne*** n'est pas encore une amie, on veut l'ajouter à notre liste d'amis.\nif personne not in amis:\n    # On ajoute une seule personne à la liste des amis si elle n'y figure pas\n    amis.append(personne)\nprint(amis)\n\n\n# 5) **Samer**, **Saif**, **Sarra** et **Adem** sont des nouveaux amis. Ajoutons les.\n# Ajouter une nouvelle liste d'amis\namis.extend(['Samer', 'Saif', 'Sarra', 'Adem'])\nprint(amis)\n\n\n# 6) Oops! **Adem** est déjà un ami. Je veux savoir le nombre de **Adem** dans la liste d'amis.\npersonne = 'Adem'\n# Nombre d'Adem dans la liste\nnp = amis.count(personne)\nprint(\"Il y'a %d '%s' dans ma liste d'amis\" % (np, personne))\n\n\n# 7) Supprimer la première occurence de **Adem** de la liste.\n# supprimer la première occurence\namis.remove(personne)\nprint(amis)\n\n# 8) Trier la liste des amis en ordre alphabétique croissant.\n# Trier la liste des amis en ordre croissant\namis.sort()\nprint(amis)\n\n\n# 9) On veut insérer **Youness** après **Yosri** dans la liste d'amis.\npers_apr = \"Youness\"\npers = \"Yosri\"\n\n# Déterminer la position de 'Yosri' dans la liste\np = amis.index(pers)\n\n# Insérer 'Youness' après 'Yosri'\namis.insert(p+1, pers_apr)\n\nprint(amis)\n\n\n# 10) 'Adem' est ami avec 'Youssef','Eya' est amie avec 'Youness', 'Hala' est amie avec 'Yosri', etc. Afficher les couples d'amis.\n# Inverser la liste d'amis\namis_inv = amis[:] # Copier la liste de tous les amis\namis_inv.reverse() # inverser la liste\n\nfor i in range(len(amis)):\n    print(\"'%s' est ami(e) avec '%s'\" % (amis[i], amis_inv[i]))\n\n\n# 11) Afficher la première moitié des amis ?\n# Indice centre de la liste\nic = len(amis)//2\n# Afficher la première moitié des amis\nprint(amis[:ic])\n\n\n# 12) Afficher la seconde moitié des amis ?\n# Afficher la seconde moitié des amis\nprint(amis[ic:])\n\n\n# 13) Les amis de **Kais** sont :\n# \n# - les deux premiers amis de **Abderrzek** qui figurent dans la première moitié, \n# - le dernier ami de **Abderrazek** qui figure dans la première moitié,\n# - les deux amis de **Abderrazek** qui figurent au centre de la deuxième moitié.\n# première moitié\npm = amis[:ic]\n# deuxième moiti\"\ndm = amis[ic:]\n# Deux premiers amis de Abderrzek qui figurent dans la première moitié\nam1 = pm[:2]\nprint(am1)\n# Le dernier ami de Abderrazek qui figure dans la première moitié\nam2 = pm[-1:]\nprint(am2)\n# indice du centre de la deuxième moitié\nic2 = len(dm) // 2\n# Les deux amis de Abderrazek qui figurent au centre de la deuxième moitié\nam3 = dm[ic2-1:ic2+1]\nprint(am3)\n# Créer la liste des amis de Kais\namis_kais = am1 + am2 + am3\nprint(\"Les amis de Kais sont :\", amis_kais)\n\n\n# 14) Les amis de **Faten** sont les amis de **Abderrazek** qui figurent dans des positions paires.\n# liste d'amis de Faten\namis_faten = amis[::2]\nprint('Les amis de Faten sont :', amis_faten)\n\n\n# 15) Définir la liste d'amis d'**Abderrazek** agé de 7 ans, de leur genre (Garçon/Fille) et de leurs ages\n# Liste des amis, leurs genres et leurs age\namis = [('Adem', 'G', 5), \n        ('Eya', 'F', 7), \n        ('Hala', 'F', 2), \n        ('Ismail', 'G', 4), \n        ('Mohamed', 'G', 7), \n        ('Saif', 'G', 6), \n        ('Samer', 'G', 8), \n        ('Sarra', 'F', 7), \n        ('Yassine', 'G', 7), \n        ('Yosri', 'G', 9), \n        ('Youness', 'G', 8), \n        ('Youssef', 'G', 7),\n        ('Iyed', 'G', 9),\n        ('Beya', 'F', 2),\n        ('Nour', 'F', 7),\n        ('Séji', 'G', 9)]\n\n\n# 16) Afficher la liste des amis de **Abderrazek** et de leurs ages.\nfor ami, genre, age in amis:\n    print(\"%s %d ans\" % (ami, age))\n\n\n# 17) Afficher la liste des amis de **Abderrazek** qui ont le même age que lui.\nfor ami, genre, age in amis:\n    if age == 7:\n        print(ami)\n\n\n# 18) Afficher la liste des filles amies de **Abderrazek**.\nfor ami, genre, age in amis:\n    if genre == 'F':\n        print(ami)\n\n\n# 19) Afficher la liste des garçons qui sont plus agés que **Abderrazek**.\nfor ami, genre, age in amis:\n    if genre == 'G' and age > 7:\n        print(\"%s %d ans\" % (ami, age))\n\n\n# 20) Diviser la liste des amis en 3 listes :\n# \n# * La première **pt_amis** contient les noms des amis les moins agés que **Abderrazek**\n# * La deuxième **gr_amis** contient les noms des amis les plus agés que **Abderrazek**\n# * La troisième **ma_amis** contient les noms des amis du même age que **Abderrazek**\n\npt_amis = []\ngr_amis = []\nma_amis = []\n\nfor ami, _, age in amis:\n    if age < 7:\n        pt_amis.append(ami)\n    elif age > 7:\n        gr_amis.append(ami)\n    else:\n        ma_amis.append(ami)        \nprint(\"Liste des amis les moins agés :\", pt_amis)\nprint(\"Liste des amis les plus agés :\", gr_amis)\nprint(\"Liste des amis du même ages :\", ma_amis)\n\n\n# 21) Extraire les ages des amis dans une liste **lage**.\nlage= []\n\nfor _, _, age in amis:\n    lage.append(age)    \nprint(lage)\n\n\n# 22) Déterminer l'age minimal **age_min** et l'age maximal **age_max**.\n# Déterminer le minimum et le maximum de la liste\nage_min = min(lage)\nage_max = max(lage)\nprint('Le plus petit a %d ans.' % age_min)\nprint('Le plus grand a %d ans.' % age_max)\n\n\n# 23) Déterminer les noms des amis les moins agés **lm_ages** et les noms des amis les plus agés **lp_ages**.\nlm_ages = []\nlp_ages = []\n\nfor ami, _, age in amis:\n    if age == age_min:\n        lm_ages.append(ami)\n    elif age == age_max:\n        lp_ages.append(ami)\n\nprint('Les %d amis les moins agés (%d ans) sont :' % (len(lm_ages), age_min), ', '.join(lm_ages))\nprint('Les %d amis les plus agés (%d ans) sont :' % (len(lp_ages), age_max), ', '.join(lp_ages))"
      }
    ]
  },
  {
    "id": 11,
    "titre": "Leçon 13 : Let's think",
    "description": "L'objectif de cette application est de résumer toutes les notions vues en programmation cette année.",
    "codes": [
      {
        "codeId": 21,
        "titre": "Let's think en Python",
        "langage": "python",
        "code": "import random\n\n# Liste qui sert de dictionnaire de questions\ndictionnaire = [\n    [('Sleep',False),('Sheep',False),('Jeep',False),  ('Car',True)],\n    [('Bell',True),  ('Cat',False),  ('Rat',False),   ('Mat',False)],\n    [('Chop',False), ('Pop',False),  ('Mop',False),   ('Hot',True)],\n    [('Map',False),  ('Beep',True),  ('Snap',False),  ('Cap',False)],\n    [('Jam',False),  ('Clam',False), ('Wing',True),   ('Ram',False)],\n    [('Cat',False),  ('Dog',False),  ('Fish',False),  ('Ball',True)],\n    [('Car',True),   ('Corn',False), ('Pie',False),   ('Bean',False)],\n    [('Book',False), ('Color',False),('Fish',True),   ('Pencil',False)],\n    [('Cloud',False),('Wet',False),  ('Tree',True),   ('Water',False)],\n    [('Jog',False),  ('Skip',False), ('Sleep',True),  ('Hop',False)],\n    [('Tree',False), ('Rock',True),  ('Flower',False),('Grass',False)],\n    [('Song',False), ('Drum',False), ('Dance',False), ('Truck',True)]\n]\n\n\ndef saisie_nbre_questions():\n    \"\"\"Selects the number of questions.\"\"\"\n    print('Select the number of questions.')\n    while True:\n        choix = int(input('Available choices are (3, 5 or 10) : '))\n        if choix in [3, 5, 10]:\n            return choix\n        print('Invalid choice!')\n\n\ndef changer_ordre_mots(mots):\n    \"\"\"Shuffles the words of one question.\"\"\"\n    random.shuffle(mots)\n    return mots\n\n\ndef selectionner_questions(n):\n    \"\"\"Selects n questions at random from the dictionnay of questions.\"\"\"\n    questions = []\n    for i in range(n):\n        while True:\n            question = random.choice(dictionnaire)\n            if question not in questions:\n                questions.append(question)\n                break\n    return questions\n\n\ndef melanger_mots(questions):\n    \"\"\"Shuffles questions words.\"\"\"\n    for i in range(len(questions)):\n        questions[i] = changer_ordre_mots(questions[i])\n    return questions\n\n\ndef afficher_question(num, nbq, question):\n    \"\"\"Displays the question number num out of nbq.\"\"\"\n    print('(Q%d/%d) What is the odd word from the list ? ' % (num, nbq))\n    for i in range(len(question)):\n        word, odd = question[i]\n        if i == len(question)-1:\n            end = \"\\n\"\n        else:\n            end = '   -   '\n        print(\"%i. %s\" % (i+1, word), end=end)\n\n\ndef lire_reponse(nb_mots):\n    \"\"\"Reads the user's answer.\"\"\"\n    while True:\n        print()\n        rep = int(input('Your answer [1, %d] : ' % nb_mots))\n        if 1 <= rep <= len(question):\n            return rep-1\n        print('Invalid choice %d!' % rep)\n\n\ndef trouver_bonne_reponse(question):\n    \"\"\"Finds the index of the odd word in the list\"\"\"\n    for i in range(len(question)):\n        word, odd = question[i]\n        if odd:\n            return i\n\n#----------------------------------------\n# programme principal\n#----------------------------------------\n\n# Saisie du nombre de questions\nnbq = saisie_nbre_questions()\n\n# Sélection de (nbq) questions à partir du dictionnaire\nquestions = selectionner_questions(nbq)\n\n# Mélanger les mots des questions\nquestions = melanger_mots(questions)\n\nscore = 0 # Score initial\nfor i in range(nbq):\n    question = questions[i]\n\n    # Afficher la question\n    print()\n    afficher_question(i+1, nbq, question)\n    \n    # lecture de la réponse de l'utilisateur\n    rep = lire_reponse(len(question))\n\n    # trouver le numéro de la bonne réponse\n    brep = trouver_bonne_reponse(question)\n\n    # vérifier si l'utilisateur a bien répondu\n    if rep == brep:\n        # afficher un message de congratulation\n        print(\"Yes! You guessed!\")\n        # incrémentation du score\n        score += 1\n    else:\n        # afficher la bonne réponse en cas d'échec\n        word, odd = question[brep]\n        print(\"No! The answer is %s.\" % word)\n\n# afficher le score\nprint()\nprint('Your final score is : %d/%d' % (score, nbq))"
      },
      {
        "codeId": 22,
        "titre": "Let's think l'algorithme",
        "langage": "algorithm",
        "code": "dictionnaire ← [\n    [(\"Sleep\",Faux), (\"Sheep\",Faux),(\"Jeep\",Faux),  (\"Car\",Vrai)],\n    [(\"Bell\",Vrai),  (\"Cat\",Faux),  (\"Rat\",Faux),   (\"Mat\",Faux)],\n    [(\"Chop\",Faux),  (\"Pop\",Faux),  (\"Mop\",Faux),   (\"Hot\",Vrai)],\n    [(\"Map\",Faux),   (\"Beep\",Vrai), (\"Snap\",Faux),  (\"Cap\",Faux)],\n    [(\"Jam\",Faux),   (\"Clam\",Faux), (\"Wing\",Vrai),  (\"Ram\",Faux)],\n    [(\"Cat\",Faux),   (\"Dog\",Faux),  (\"Fish\",Faux),  (\"Ball\",Vrai)],\n    [(\"Car\",Vrai),   (\"Corn\",Faux), (\"Pie\",Faux),   (\"Bean\",Faux)],\n    [(\"Book\",Faux),  (\"Color\",Faux),(\"Fish\",Vrai),  (\"Pencil\",Faux)],\n    [(\"Cloud\",Faux), (\"Wet\",Faux),  (\"Tree\",Vrai),  (\"Water\",Faux)],\n    [(\"Jog\",Faux),   (\"Skip\",Faux), (\"Sleep\",Vrai), (\"Hop\",Faux)],\n    [(\"Tree\",Faux),  (\"Rock\",Vrai), (\"Flower\",Faux),(\"Grass\",Faux)],\n    [(\"Song\",Faux),  (\"Drum\",Faux), (\"Dance\",Faux), (\"Truck\",Vrai)]\n]\n\nfonction saisie_nbre_questions():entier\n    afficher(\"Select the number of questions.\")\n    répéter\n        afficher(\"Available choices are (3, 5 or 10) : \")\n        Lire(choix)\n        si non choix dans [3, 5, 10] alors\n            afficher()\n        fin si\n    jusqu'a dans [3, 5, 10]\n    saisie_nbre_questions ← choix\nfin saisie_nbre_questions\n\n\nfonction changer_ordre_mots(mots:liste):liste\n    alea.melanger(mots)\n    changer_ordre_mots  ← mots\nfin changer_ordre_mots\n\nfonction selectionner_questions(n:entier):liste\n    questions ← []\n    pour i de 0 à n-1 faire\n        répéter\n            question ← alea.choix(dictionnaire)\n        jusqu'a non question dans questions\n        questions.ajouter(question)\n    fin pour\n    selectionner_questions ←  questions\nfin selectionner_questions\n\nfonction melanger_mots(questions:liste):liste\n    pour i de 0 à long(questions)-1 faire\n        questions[i] ← changer_ordre_mots(questions[i])\n    melanger_mots ← questions\nfin melanger_mots\n\nprocédure afficher_question(num:entier, nbq:entier, question:liste)\n    afficher(\"(Q%d/%d) What is the odd word from the list ? \" % (num, nbq))\n    pour i de 0 à long(question)-1 faire\n        word, odd ← question[i]\n        afficher(\"%i. %s\" % (i+1, word))\n    fin pour \nfin afficher_question\n\nfonction lire_reponse(nb_mots : entier):entier\n    répéter\n        afficher(\"Your answer [1, %d] : \" % nb_mots)\n        Lire(rep)\n        si rep > long(question) ou rep < 1 alors\n            afficher(\"Invalid choice %d!\" % rep)\n        fin si\n    jusqu'a 1 <= rep <= long(question)\n    lire_reponse ← rep-1\nfin lire_reponse\n\nfonction trouver_bonne_reponse(question:liste):entier\n    pour i de 0 à long(question)-1  faire\n        word, odd ← question[i]\n        si odd alors\n            trouver_bonne_reponse ← i\n        fin si\n    fin pour\nfin trouver_bonne_reponse\n\nDébut PP\n// Saisie du nombre de questions\nnbq ← saisie_nbre_questions()\n// Sélection de (nbq) questions à partir du dictionnaire\nquestions ← selectionner_questions(nbq)\n// Mélanger les mots des questions\nquestions ← melanger_mots(questions)\nscore ← 0 // Score initial\npour i de 0 à nbq-1 faire\n    question ← questions[i]\n    // Afficher la question\n    afficher_question(i+1, nbq, question)\n    // lecture de la réponse de l'utilisateur\n    rep ← lire_reponse(long(question))\n    // trouver le numéro de la bonne réponse\n    brep ← trouver_bonne_reponse(question)\n    // vérifier si l'utilisateur a bien répondu\n    si rep = brep alors\n        afficher(\"Yes! You guessed!\")\n        score ← score + 1\n    sinon\n        word, odd ← question[brep]\n        afficher(\"No! The answer is %s.\" % word)\n    fin si\nfin pour\nafficher(\"Your final score is : %d/%d\" % (score, nbq))\nFin PP"
      },
      {
        "codeId": 23,
        "titre": "Gameboy clone",
        "langage": "python",
        "code": "# Dimensions de la gameboy clone en mm\nWIDTH, HEIGHT = 90, 150\n\n# Chaque mm correspond à \"COEF\" pixels\nCOEF = 5\n\n# Laisser un petit espace entre la gameboy clone\n# et les bords de la fenêtre\nMARGIN = 15\n\n# Liste des formes géométriques constituant la gameboy clone\n# chaque tuple contient trois informations :\n# (\n#   'rect',     # forme géométique\n#   '#236b39',  # couleur d'arrière plan de la forme géométrique\n#   [\n#       0, 0,   # coordonnées du coins supérieur gauche (x1, y1)\n#       90, 150 # coordonnées du coins inférieur droit  (x2, y2)\n#   ]\n# )\ngameboy = [\n    # gameboy clone body\n    ('rect', '#236b39', [0, 0, 90, 150]),\n    # gameboy clone screen\n    ('rect', '#9ba2a2', [5, 8, 85, 71]),\n    ('rect', '#000000', [14, 16, 76, 63]),\n    # gameboy clone right oval buttons\n    ('oval', '#0f1712', [65, 85, 74, 94]),\n    ('oval', '#0f1712', [74, 94, 83, 103]),\n    ('oval', '#0f1712', [65, 103, 74, 112]),\n    ('oval', '#0f1712', [56, 94, 65, 103]),\n    # gameboy clone RESET/START buttons\n    ('rect', '#ad3626', [32, 124, 43, 127]),\n    ('rect', '#ad3626', [47, 124, 58, 127]),\n    # gameboy clone arrow keys\n    ('polygon', '#ad3626', [14, 85, 24, 85, 24, 93, 19, 98, 14, 93]),\n    ('polygon', '#ad3626', [34, 95, 34, 105, 26, 105, 21, 100, 26, 95]),\n    ('polygon', '#ad3626', [14, 115, 24, 115, 24, 107, 19, 102, 14, 107]),\n    ('polygon', '#ad3626', [4, 95, 4, 105, 12, 105, 17, 100, 12, 95]),\n    # gameboy clone speaker holes\n    ('rect', 'black' , [67, 131, 83, 132]),\n    ('rect', 'black' , [67, 134, 83, 135]),\n    ('rect', 'black' , [67, 137, 83, 138]),\n    ('rect', 'black' , [67, 140, 83, 141]),\n    ('rect', 'black' , [67, 143, 83, 144]),\n    # gameboy clone sound button\n    ('rect', '#ad3626', [6, 76, 13, 79])\n]\n\n\ndef recalc_coord(x):\n    \"\"\"Recalculer les coordonnées d'un point\n    - convertir l'unité du mm en pixels\n    - ajouter la marge\"\"\"\n    return x * COEF + MARGIN\n\n\ndef recalc_shape_coords(coords):\n    \"\"\"Reclaculer toutes les coordonnées d'une forme\"\"\"\n    for i in range(len(coords)):\n        coords[i] = recalc_coord(coords[i])\n    return coords\n\n\n#-----------------------------------------------------------------------------------\n# Programme Principal\n#-----------------------------------------------------------------------------------\nfrom tkinter import *\nimport random\nimport time\n\n# Créer la fenêtre\nfen = Tk()\nfen.title('Gameboy clone')\n\n# Créer le Canvas\ncanvas = Canvas(fen, width=WIDTH*COEF+2*MARGIN, height=HEIGHT*COEF+2*MARGIN)\ncanvas.pack()\n\n# Afficher les formes\nfor i in range(len(gameboy)):\n    forme, bgcolor, coords = gameboy[i]\n    coords = recalc_shape_coords(coords)\n    if forme == 'rect':\n        x1, y1, x2, y2 = coords\n        canvas.create_rectangle(x1, y1, x2, y2, fill=bgcolor)\n    elif forme == 'oval':\n        x1, y1, x2, y2 = coords\n        canvas.create_oval(x1, y1, x2, y2, fill=bgcolor)\n    elif forme == 'polygon':\n        canvas.create_polygon(coords, fill=bgcolor)\n\n# Coordonnées de l'écran\nscx1, scy1, scx2, scy2 = gameboy[2][2]\n# Largeur et Hauteur de l'écran\nSC_WIDTH, SC_HEIGHT = scx2-scx1, scy2-scy1\n\n# Rayon de la balle\nRAYON = 15\n# Position initiale de la balle à des coordonnées aléatoires\nbx1, by1 = random.randint(scx1, scx2 - RAYON), scy1 + 2\n# Création de la balle\nball = canvas.create_oval(bx1, by1, bx1+RAYON, by1+RAYON, fill=\"orange\")\n# Vitesse initiale de la balle\nspeed_x, speed_y = random.randint(-6, 6), random.randint(1, 6)\n\n# Dimensions de la raquette\nRA_WIDTH, RA_HEIGHT = SC_WIDTH * 25 // 100, SC_HEIGHT * 5 // 100\n# Position initiale de la raquette\nrx1, ry1 = scx1 + (SC_WIDTH - RA_WIDTH)//2, scy2 - SC_HEIGHT * 15 // 100\n# Création de la raquette\nraquette = canvas.create_rectangle(rx1, ry1, rx1+RA_WIDTH,ry1+RA_HEIGHT, fill=\"white\")\n# Vitesse de déplacement de la raquette\nrspeed = SC_WIDTH * 20 // 100\n\n\ndef right_arrow(event):\n    \"\"\"Déplacer la raquette à droite\"\"\"\n    rx1,ry1,rx2,ry2 = canvas.coords(raquette)\n    nrx1 = rx1 + rspeed\n    if nrx1+RA_WIDTH>scx2:\n        nrx1 = scx2 - RA_WIDTH\n    canvas.move(raquette, (nrx1-rx1),0)\n\n\ndef left_arrow(event):\n    \"\"\"Déplacer la raquette à gauche\"\"\"\n    rx1,ry1,rx2,ry2 = canvas.coords(raquette)\n    nrx1 = rx1 - rspeed\n    if nrx1<=scx1:\n        nrx1 = scx1\n    canvas.move(raquette, (nrx1-rx1),0)\n\n\nfen.bind('<Right>', right_arrow)\nfen.bind('<Left>', left_arrow)\n        \n\nwhile True:\n    # Déterminer les coordonnées de la balle\n    left, top, right, bottom = canvas.coords(ball)\n    # Déterminer les coordonées de la raquette\n    rleft, rtop, rright, rbottom = canvas.coords(raquette)\n\n    # Changer la direction de la balle\n    # Lorsqu'elle atteint les limites de \n    # la scène\n    if left<=scx1 or right>=scx2:\n        speed_x = -speed_x\n    if top<=scy1 or (bottom>=rtop and left>=rleft and right<=rright):\n        speed_y = -speed_y\n    # Perdu\n    if top>rbottom:\n        break\n    # Changer la position de la balle\n    canvas.move(ball, speed_x, speed_y)\n    # Marquer un laps de temps avant de rafraichir la fenêtre\n    time.sleep(0.020)\n    fen.update()\n\n# Game Over\ncanvas.create_text(scx1+SC_WIDTH//2, scy1+SC_HEIGHT//2, text=\"Game Over!\", fill=\"red\", font=\"Arial 20\")\n\n# Animer une balle dans l'écran de la gameboy\nmainloop()"
      }
    ]
  }
]
